import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/app_state_provider.dart';
import '../screens/company_registration_screen.dart';
import '../screens/driver_registration_screen.dart';
import '../screens/dashboard_screen.dart';
import '../screens/login_screen.dart';

class OnboardingScreen extends StatefulWidget {
  const OnboardingScreen({super.key});

  @override
  State<OnboardingScreen> createState() => _OnboardingScreenState();
}

class _OnboardingScreenState extends State<OnboardingScreen> {
  final PageController _pageController = PageController();
  int _currentPage = 0;

  final List<OnboardingPageData> _pages = [
    OnboardingPageData(
      icon: 'üöñ',
      title: 'Mobility Ops 360„Å∏„Çà„ÅÜ„Åì„Åù',
      subtitle: '„Çø„ÇØ„Ç∑„ÉºÊ•≠Áïå„ÅÆDX„ÇíÈù©Êñ∞„Åô„Çã„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†',
      description: '„Ç≥„Éº„É´„Çª„É≥„Çø„Éº‰∫∫‰ª∂Ë≤ª75%ÂâäÊ∏õ\n„Éâ„É©„Ç§„Éê„ÉºÂÖÖË∂≥Áéá95%ÊîπÂñÑ\nËªä‰∏°„ÅÇ„Åü„ÇäÁ≤óÂà©12%Âêë‰∏ä',
    ),
    OnboardingPageData(
      icon: 'üé§',
      title: 'AIÈü≥Â£∞ÈÖçËªä„Ç∑„Çπ„ÉÜ„É†',
      subtitle: 'Ëá™ÂãïÈü≥Â£∞ÂøúÁ≠î„ÅßÂäπÁéáÂåñ',
      description: 'Twilio„ÇíÊ¥ªÁî®„Åó„ÅüÊó•Êú¨Ë™ûAIÈü≥Â£∞„Ç∑„Çπ„ÉÜ„É†„Åß\nÈ°ßÂÆ¢„Åã„Çâ„ÅÆÈÖçËªä‰æùÈ†º„ÇíËá™ÂãïÂá¶ÁêÜ\n24ÊôÇÈñì365Êó•ÂØæÂøúÂèØËÉΩ',
    ),
    OnboardingPageData(
      icon: 'üë•',
      title: '„ÇÆ„Ç∞„Éâ„É©„Ç§„Éê„ÉºÁÆ°ÁêÜ',
      subtitle: '„Çπ„Éû„Éº„Éà„Éû„ÉÉ„ÉÅ„É≥„Ç∞„ÅßÊúÄÈÅ©Âåñ',
      description: '„É™„Ç¢„É´„Çø„Ç§„É†‰ΩçÁΩÆËøΩË∑°\nAI„Å´„Çà„ÇãÊúÄÈÅ©„Éâ„É©„Ç§„Éê„Éº„Éû„ÉÉ„ÉÅ„É≥„Ç∞\nÂèéÁõä„ÉªË©ï‰æ°ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†',
    ),
    OnboardingPageData(
      icon: 'üîí',
      title: '„Çª„Ç≠„É•„Ç¢ÈÅãÁî®',
      subtitle: '„Çº„É≠„Éà„É©„Çπ„Éà„ÅßÂÆâÂøÉ„ÉªÂÆâÂÖ®',
      description: '„Çº„É≠„Éà„É©„Çπ„ÉàIAM\n„É™„Ç¢„É´„Çø„Ç§„É†Áõ£Êüª„É≠„Ç∞\nÂÆåÂÖ®ÊöóÂè∑ÂåñÈÄö‰ø°',
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Color(0xFF667EEA), Color(0xFF764BA2)],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              // „Éò„ÉÉ„ÉÄ„Éº
              Padding(
                padding: const EdgeInsets.all(20),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      '${_currentPage + 1}/${_pages.length}',
                      style: const TextStyle(
                        color: Colors.white70,
                        fontSize: 16,
                      ),
                    ),
                    TextButton(
                      onPressed: () => _navigateToUserSelection(),
                      child: const Text(
                        '„Çπ„Ç≠„ÉÉ„Éó',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 16,
                        ),
                      ),
                    ),
                  ],
                ),
              ),

              // „Éö„Éº„Ç∏„Éì„É•„Éº
              Expanded(
                child: PageView.builder(
                  controller: _pageController,
                  onPageChanged: (index) {
                    setState(() {
                      _currentPage = index;
                    });
                  },
                  itemCount: _pages.length,
                  itemBuilder: (context, index) {
                    return _buildPage(_pages[index]);
                  },
                ),
              ),

              // „Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº„Å®„Éú„Çø„É≥
              Padding(
                padding: const EdgeInsets.all(20),
                child: Column(
                  children: [
                    // „Éö„Éº„Ç∏„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: List.generate(
                        _pages.length,
                        (index) => Container(
                          margin: const EdgeInsets.symmetric(horizontal: 4),
                          width: _currentPage == index ? 24 : 8,
                          height: 8,
                          decoration: BoxDecoration(
                            color: _currentPage == index
                                ? Colors.white
                                : Colors.white54,
                            borderRadius: BorderRadius.circular(4),
                          ),
                        ),
                      ),
                    ),

                    const SizedBox(height: 32),

                    // „Éú„Çø„É≥
                    if (_currentPage == _pages.length - 1)
                      Column(
                        children: [
                          SizedBox(
                            width: double.infinity,
                            child: ElevatedButton(
                              onPressed: () => _navigateToUserSelection(),
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.white,
                                foregroundColor: const Color(0xFF667EEA),
                                padding: const EdgeInsets.symmetric(vertical: 16),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                              child: const Text(
                                '„ÅØ„Åò„ÇÅ„Çã',
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(height: 12),
                          TextButton(
                            onPressed: () => _showROICalculator(context),
                            child: const Text(
                              'ROIË®àÁÆóÊ©ü„ÅßÂäπÊûú„ÇíÁ¢∫Ë™ç',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 14,
                              ),
                            ),
                          ),
                        ],
                      )
                    else
                      Row(
                        children: [
                          Expanded(
                            child: TextButton(
                              onPressed: () {
                                _pageController.previousPage(
                                  duration: const Duration(milliseconds: 300),
                                  curve: Curves.easeInOut,
                                );
                              },
                              child: const Text(
                                'Êàª„Çã',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 16,
                                ),
                              ),
                            ),
                          ),
                          Expanded(
                            flex: 2,
                            child: ElevatedButton(
                              onPressed: () {
                                _pageController.nextPage(
                                  duration: const Duration(milliseconds: 300),
                                  curve: Curves.easeInOut,
                                );
                              },
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.white,
                                foregroundColor: const Color(0xFF667EEA),
                                padding: const EdgeInsets.symmetric(vertical: 16),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                              child: const Text(
                                'Ê¨°„Å∏',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                          Expanded(child: Container()),
                        ],
                      ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildPage(OnboardingPageData page) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 32),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // „Ç¢„Ç§„Ç≥„É≥
          Text(
            page.icon,
            style: const TextStyle(fontSize: 100),
          ),
          
          const SizedBox(height: 48),
          
          // „Çø„Ç§„Éà„É´
          Text(
            page.title,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 28,
              fontWeight: FontWeight.bold,
            ),
            textAlign: TextAlign.center,
          ),
          
          const SizedBox(height: 16),
          
          // „Çµ„Éñ„Çø„Ç§„Éà„É´
          Text(
            page.subtitle,
            style: const TextStyle(
              color: Colors.white70,
              fontSize: 18,
            ),
            textAlign: TextAlign.center,
          ),
          
          const SizedBox(height: 32),
          
          // Ë™¨Êòé
          Text(
            page.description,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
              height: 1.6,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  void _navigateToUserSelection() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.white,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => _buildUserSelectionSheet(),
    );
  }

  Widget _buildUserSelectionSheet() {
    return Container(
      constraints: BoxConstraints(
        maxHeight: MediaQuery.of(context).size.height * 0.8,
      ),
      padding: const EdgeInsets.all(24),
      child: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
          Container(
            width: 40,
            height: 4,
            decoration: BoxDecoration(
              color: Colors.grey.shade300,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          
          const SizedBox(height: 24),
          
          const Text(
            '„ÅîÂà©Áî®ÊñπÊ≥ï„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Color(0xFF2D3748),
            ),
          ),
          
          const SizedBox(height: 32),
          
          // „Çø„ÇØ„Ç∑„Éº‰ºöÁ§æ„Å®„Åó„Å¶ÁôªÈå≤
          _buildSelectionCard(
            icon: 'üè¢',
            title: '„Çø„ÇØ„Ç∑„Éº‰ºöÁ§æ„Å®„Åó„Å¶ÁôªÈå≤',
            subtitle: '‰ºöÁ§æÂÖ®‰Ωì„Åß„Ç∑„Çπ„ÉÜ„É†„ÇíÂ∞éÂÖ•',
            description: '‚Ä¢ „Éâ„É©„Ç§„Éê„ÉºÁÆ°ÁêÜ\n‚Ä¢ ÈÖçËªä„Ç∑„Çπ„ÉÜ„É†ÈÅãÁî®\n‚Ä¢ ÂèéÁõäÂàÜÊûê',
            onTap: () {
              Navigator.of(context).pop();
              Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (context) => const CompanyRegistrationScreen(),
                ),
              );
            },
          ),
          
          const SizedBox(height: 16),
          
          // „Éâ„É©„Ç§„Éê„Éº„Å®„Åó„Å¶ÁôªÈå≤
          _buildSelectionCard(
            icon: 'üë§',
            title: '„Éâ„É©„Ç§„Éê„Éº„Å®„Åó„Å¶ÁôªÈå≤',
            subtitle: '„ÇÆ„Ç∞„ÉØ„Éº„Ç´„Éº„Å®„Åó„Å¶ÂèÇÂä†',
            description: '‚Ä¢ ÈÖçËªä„É™„ÇØ„Ç®„Çπ„ÉàÂèó‰ø°\n‚Ä¢ ÂèéÁõäÁÆ°ÁêÜ\n‚Ä¢ Ë©ï‰æ°„Ç∑„Çπ„ÉÜ„É†',
            onTap: () {
              Navigator.of(context).pop();
              Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (context) => const DriverRegistrationScreen(),
                ),
              );
            },
          ),
          
          const SizedBox(height: 16),
          
          // Êó¢Â≠ò„Ç¢„Ç´„Ç¶„É≥„Éà„Åß„É≠„Ç∞„Ç§„É≥
          _buildSelectionCard(
            icon: 'üîë',
            title: 'Êó¢Â≠ò„Ç¢„Ç´„Ç¶„É≥„Éà„Åß„É≠„Ç∞„Ç§„É≥',
            subtitle: 'ÁôªÈå≤Ê∏à„Åø„ÅÆÂ†¥Âêà„ÅØ„Åì„Å°„Çâ',
            description: '‚Ä¢ ‰ºöÁ§æ„Ç¢„Ç´„Ç¶„É≥„Éà\n‚Ä¢ „Éâ„É©„Ç§„Éê„Éº„Ç¢„Ç´„Ç¶„É≥„Éà\n‚Ä¢ ÁÆ°ÁêÜËÄÖ„Ç¢„Ç´„Ç¶„É≥„Éà',
            onTap: () {
              Navigator.of(context).pop();
              Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (context) => const LoginScreen(),
                ),
              );
            },
          ),
          
          const SizedBox(height: 16),
          
          // „Éá„É¢‰ΩìÈ®ì
          _buildSelectionCard(
            icon: 'üéÆ',
            title: '„Éá„É¢‰ΩìÈ®ì',
            subtitle: '„Ç∑„Çπ„ÉÜ„É†„ÇíË©¶„Åó„Å¶„Åø„Çã',
            description: '‚Ä¢ ÂÖ®Ê©üËÉΩ‰ΩìÈ®ìÂèØËÉΩ\n‚Ä¢ ÁôªÈå≤‰∏çË¶Å\n‚Ä¢ 7Êó•ÈñìÁÑ°Êñô',
            onTap: () {
              Navigator.of(context).pop();
              Navigator.of(context).pushReplacement(
                MaterialPageRoute(
                  builder: (context) => const DashboardScreen(),
                ),
              );
            },
          ),
          
          const SizedBox(height: 24),
          
          // „Ç¢„Éó„É™„Ç¢„ÇØ„Çª„Çπ„Éú„Çø„É≥
          const Divider(),
          const SizedBox(height: 16),
          
          const Text(
            '„Ç¢„Éó„É™‰ΩìÈ®ì',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Color(0xFF2D3748),
            ),
          ),
          
          const SizedBox(height: 16),
          
          OutlinedButton.icon(
            onPressed: () {
              Navigator.of(context).pop();
              Navigator.pushNamed(context, '/dashboard');
            },
            icon: const Icon(Icons.dashboard),
            label: const Text('ÁÆ°ÁêÜ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ'),
            style: OutlinedButton.styleFrom(
              minimumSize: const Size(double.infinity, 50),
            ),
          ),
          
          const SizedBox(height: 12),
          
          OutlinedButton.icon(
            onPressed: () {
              Navigator.of(context).pop();
              Navigator.pushNamed(context, '/customer-dispatch');
            },
            icon: const Icon(Icons.taxi_alert),
            label: const Text('È°ßÂÆ¢ÈÖçËªä„Ç¢„Éó„É™'),
            style: OutlinedButton.styleFrom(
              minimumSize: const Size(double.infinity, 50),
            ),
          ),
          
          const SizedBox(height: 12),
          
          OutlinedButton.icon(
            onPressed: () {
              Navigator.of(context).pop();
              Navigator.pushNamed(context, '/driver-app');
            },
            icon: const Icon(Icons.directions_car),
            label: const Text('„Éâ„É©„Ç§„Éê„Éº„Ç¢„Éó„É™'),
            style: OutlinedButton.styleFrom(
              minimumSize: const Size(double.infinity, 50),
            ),
          ),
          
          const SizedBox(height: 32),
          ],
        ),
      ),
    );
  }

  Widget _buildSelectionCard({
    required String icon,
    required String title,
    required String subtitle,
    required String description,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.grey.shade50,
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: Colors.grey.shade200),
        ),
        child: Row(
          children: [
            Text(
              icon,
              style: const TextStyle(fontSize: 32),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF2D3748),
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    subtitle,
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey.shade600,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    description,
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey.shade700,
                      height: 1.4,
                    ),
                  ),
                ],
              ),
            ),
            Icon(
              Icons.arrow_forward_ios,
              color: Colors.grey.shade400,
              size: 16,
            ),
          ],
        ),
      ),
    );
  }

  void _showROICalculator(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => const ROICalculatorDialog(),
    );
  }
}

class OnboardingPageData {
  final String icon;
  final String title;
  final String subtitle;
  final String description;

  OnboardingPageData({
    required this.icon,
    required this.title,
    required this.subtitle,
    required this.description,
  });
}

class ROICalculatorDialog extends StatefulWidget {
  const ROICalculatorDialog({super.key});

  @override
  State<ROICalculatorDialog> createState() => _ROICalculatorDialogState();
}

class _ROICalculatorDialogState extends State<ROICalculatorDialog> {
  final _vehicleCountController = TextEditingController(text: '50');
  final _operatorCountController = TextEditingController(text: '5');
  final _monthlyCallsController = TextEditingController(text: '10000');

  double _calculateMonthlySavings() {
    final vehicleCount = int.tryParse(_vehicleCountController.text) ?? 0;
    final operatorCount = int.tryParse(_operatorCountController.text) ?? 0;
    final monthlyCalls = int.tryParse(_monthlyCallsController.text) ?? 0;

    // „Ç≥„Éº„É´„Çª„É≥„Çø„Éº‰∫∫‰ª∂Ë≤ªÂâäÊ∏õÔºà75%ÂâäÊ∏õÔºâ
    final operatorCostSavings = operatorCount * 300000 * 0.75; // Êúà30‰∏áÂÜÜ/‰∫∫ √ó 75%ÂâäÊ∏õ
    
    // ÈÖçËªäÂäπÁéáÂêë‰∏ä„Å´„Çà„ÇãÂèéÁõäÂ¢óÂä†Ôºà12%Âêë‰∏äÔºâ
    final revenueIncrease = vehicleCount * 800000 * 0.12; // Êúà80‰∏áÂÜÜ/Âè∞ √ó 12%Âêë‰∏ä
    
    // ÈÄöË©±„Ç≥„Çπ„ÉàÂâäÊ∏õ
    final callCostSavings = monthlyCalls * 50 * 0.8; // 1ÈÄöË©±50ÂÜÜ √ó 80%ÂâäÊ∏õ

    return operatorCostSavings + revenueIncrease + callCostSavings;
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: Container(
        padding: const EdgeInsets.all(24),
        constraints: const BoxConstraints(maxWidth: 400),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'üí∞ ROIË®àÁÆóÊ©ü',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            
            const SizedBox(height: 24),
            
            TextField(
              controller: _vehicleCountController,
              decoration: const InputDecoration(
                labelText: 'Ëªä‰∏°Âè∞Êï∞',
                suffix: Text('Âè∞'),
              ),
              keyboardType: TextInputType.number,
              onChanged: (_) => setState(() {}),
            ),
            
            const SizedBox(height: 16),
            
            TextField(
              controller: _operatorCountController,
              decoration: const InputDecoration(
                labelText: '„Ç™„Éö„É¨„Éº„Çø„ÉºÊï∞',
                suffix: Text('‰∫∫'),
              ),
              keyboardType: TextInputType.number,
              onChanged: (_) => setState(() {}),
            ),
            
            const SizedBox(height: 16),
            
            TextField(
              controller: _monthlyCallsController,
              decoration: const InputDecoration(
                labelText: 'ÊúàÈñìÈÄöË©±Êï∞',
                suffix: Text('‰ª∂'),
              ),
              keyboardType: TextInputType.number,
              onChanged: (_) => setState(() {}),
            ),
            
            const SizedBox(height: 24),
            
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.green.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.green.shade200),
              ),
              child: Column(
                children: [
                  const Text(
                    'ÊúàÈñì„Ç≥„Çπ„ÉàÂâäÊ∏õÂäπÊûú',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '¬•${_calculateMonthlySavings().toStringAsFixed(0)}',
                    style: const TextStyle(
                      fontSize: 28,
                      fontWeight: FontWeight.bold,
                      color: Colors.green,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Âπ¥Èñì: ¬•${(_calculateMonthlySavings() * 12).toStringAsFixed(0)}',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey.shade600,
                    ),
                  ),
                ],
              ),
            ),
            
            const SizedBox(height: 24),
            
            Row(
              children: [
                Expanded(
                  child: TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('Èñâ„Åò„Çã'),
                  ),
                ),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.of(context).pop();
                      // ÁÑ°Êñô„Éà„É©„Ç§„Ç¢„É´Áî≥„ÅóËæº„Åø„Å∏
                    },
                    child: const Text('ÁÑ°Êñô„Éà„É©„Ç§„Ç¢„É´'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}