name: 🚖 Mobility Ops 360 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # テスト・品質チェック
  test:
    name: 🧪 Test & Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 📱 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: 📦 Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend/mobi360_app && flutter pub get
        
    - name: 🔍 Flutter Analysis
      run: cd frontend/mobi360_app && flutter analyze
      
    - name: 🧪 Flutter Tests
      run: cd frontend/mobi360_app && flutter test
      
    - name: 🧪 Backend Tests
      run: cd backend && npm test
      continue-on-error: true
      
    - name: 🔒 Security Audit
      run: cd backend && npm audit --audit-level moderate
      continue-on-error: true
      
    - name: 📊 Generate Test Report
      if: always()
      run: |
        mkdir -p reports
        echo "# Test Report" > reports/test-results.md
        echo "Generated: $(date)" >> reports/test-results.md
        
    - name: 📢 Notify Test Results
      if: always()
      run: |
        STATUS=$([[ ${{ job.status }} == 'success' ]] && echo "success" || echo "error")
        MESSAGE="テスト実行完了 - Status: ${{ job.status }}"
        echo "Test notification: $MESSAGE"
        # Webhook通知は実装予定

  # ビルド
  build:
    name: 🔨 Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 📱 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: 📦 Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend/mobi360_app && flutter pub get
        
    - name: 🔨 Build Flutter Web
      run: |
        cd frontend/mobi360_app
        flutter build web --release --dart-define=API_BASE_URL=https://api.mobility360.jp
        
    - name: 📦 Archive Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          frontend/mobi360_app/build/web/
          backend/src/
        retention-days: 30
        
    - name: 📢 Notify Build Complete
      run: |
        echo "Build completed successfully"
        # Webhook通知は実装予定

  # デプロイ（本番環境）
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: ☁️ Setup Wrangler
      run: npm install -g wrangler
      
    - name: 🚀 Deploy to Cloudflare Workers
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        cd backend
        wrangler publish --env production
        
    - name: 🌐 Deploy Frontend to Cloudflare Pages
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        echo "Frontend deployment placeholder"
        # wrangler pages publish frontend/mobi360_app/build/web --project-name=mobility-ops-360
        
    - name: 🏥 Health Check
      run: |
        sleep 30
        curl -f https://api.mobility360.jp/health || exit 1
        
    - name: 📢 Notify Deployment Success
      run: |
        echo "Production deployment completed successfully"
        # Google Chat webhook通知実装予定
        
    - name: 📝 Create Release Tag
      if: success()
      run: |
        TAG="v$(date +%Y%m%d%H%M%S)"
        git tag $TAG
        git push origin $TAG
        echo "Created release tag: $TAG"

  # デプロイ（ステージング環境）
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: ☁️ Setup Wrangler
      run: npm install -g wrangler
      
    - name: 🎭 Deploy to Staging
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        cd backend
        wrangler publish --env staging
        
    - name: 🏥 Staging Health Check
      run: |
        sleep 15
        curl -f https://staging-api.mobility360.jp/health || exit 1
        
    - name: 📢 Notify Staging Deployment
      run: |
        echo "Staging deployment completed"
        # Google Chat webhook通知実装予定

  # パフォーマンス監視
  performance-monitor:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📊 Lighthouse CI
      uses: treosh/lighthouse-ci-action@v12
      with:
        urls: |
          https://mobility360.jp
          https://api.mobility360.jp/health
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: 📈 Performance Report
      run: |
        echo "Performance monitoring completed"
        # 結果をGoogle Chatに通知予定

  # セキュリティスキャン
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔍 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript
        
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: 🔒 Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Security Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 📢 Security Report Notification
      run: |
        echo "Security scan completed"
        # セキュリティレポートをGoogle Chatに通知予定